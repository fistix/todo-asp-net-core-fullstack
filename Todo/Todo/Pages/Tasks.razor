@page "/tasks"
@inject HttpClient _http
@inject AuthHandler _auth
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime

<h1>Tasks</h1>

@*@{ var idToBeDeleted = 0;}*@


<span class="error">@ErrorDetails</span>
<SfGrid @ref="Grid" DataSource="@taskDetails" AllowPaging="true" AllowSorting="true" AllowFiltering="true">

  <GridPageSettings PageSize="15">

  </GridPageSettings>
  <GridEditSettings AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal">

  </GridEditSettings>
  <GridColumns>
    <GridColumn Field=@nameof(TaskDetail.Title) HeaderText="Title" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="120"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.Description) HeaderText="Description" Width="150"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.Active) HeaderText="Is Active" TextAlign="TextAlign.Left" Width="100"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.CreatedOn) HeaderText="Created Date" TextAlign="TextAlign.Left" Width="120"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.ModifiedOn) HeaderText="Modified Date" TextAlign="TextAlign.Left" Width="120"></GridColumn>
    <GridColumn HeaderText="Update" TextAlign="TextAlign.Center" Width="120">
      <Template>
        @{
          var myObj = (context as TaskDetail);
          <div>
            <SfButton CssClass="e-info">
              <a class="nav-link" href="editTask/@myObj.TaskId" Match="NavLinkMatch.All">
                Edit
              </a>
            </SfButton>
          </div>
        }
      </Template>
    </GridColumn>

    <GridColumn HeaderText="Delete" TextAlign="TextAlign.Center" Width="120">
      <Template>
        @{
          var obj = (context as TaskDetail);

          <SfButton CssClass="e-danger" @onclick="() => StoreId(obj.TaskId)">
            Delete
            <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible">
              <DialogTemplates>
                <Header> Confirm Delete</Header>
                <Content> Are you sure you want to delete this record? (@idToBeDeleted)</Content>
              </DialogTemplates>
              <DialogButtons>
                <DialogButton Content="OK" IsPrimary="true" @onclick="() => Delete(idToBeDeleted)" />
                <DialogButton Content="Cancel" OnClick="@CloseDialog" />
              </DialogButtons>
            </SfDialog>
          </SfButton>
        }
      </Template>
    </GridColumn>

  </GridColumns>
</SfGrid>

<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {
  Guid? idToBeDeleted = null;
  //Toast
  SfToast ToastObj;
  private string ToastTitle = "Record deleted successfully!";
  private string ToastCssClass = "";

  private bool IsVisible { get; set; }

  private void StoreId(Guid? id)
  {
    idToBeDeleted = id;
    OpenDialog().GetAwaiter().GetResult();
  }

  private async Task OpenDialog()
  {
    this.IsVisible = true;
    //Console.WriteLine(id);
    //bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
    //if (confirmed)
    //{
    //  await Delete(id);
    //}
    //await JsRuntime.InvokeVoidAsync("Alert", "Record Is Deleted!");
  }

  private void CloseDialog()
  {
    this.IsVisible = false;
  }
  private async Task Delete(/*Microsoft.AspNetCore.Components.Web.MouseEventArgs*/ Guid? val)
  {
    //this.IsVisible = false;
    _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await _auth.GetAuthAccessToken());
    var response = await _http.DeleteAsync($"https://localhost:5001/api/tasks/{val}");
    CloseDialog();
    if (response.IsSuccessStatusCode)
    {

      await ToastObj.Show();

    }
  }




  SfButton btnEdit;

  SfGrid<TaskDetail> Grid;
  SearchTodoComponent searchTodoComponent;

  public string ErrorDetails = "";
  public List<TaskDetail> taskDetails = null;
  public ResponseModel responseModel = null;

  protected override async Task OnInitializedAsync()
  {
    await GetTasks();
    //State.OnChange += StateHasChanged;
  }

  private async System.Threading.Tasks.Task GetTasks()
  {
    _http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", await _auth.GetAuthAccessToken());
    var response = await _http.GetAsync("https://localhost:5001/api/tasks");
    if (response.IsSuccessStatusCode)
    {
      string content = await response.Content.ReadAsStringAsync();
      responseModel = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseModel>(content);
      taskDetails = responseModel.Payload;
      //State.OnInitSetTodos(responseModel.Payload);
    }

  }

  //public void OnEditClick(Guid? val)
  //{
  //  Console.WriteLine(val);

  //}

}