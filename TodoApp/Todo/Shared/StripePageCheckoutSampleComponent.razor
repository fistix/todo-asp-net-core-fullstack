@inject StripeStateService _StripeStateService
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime


<h3>Checkout Sample Component</h3>


<SfTextBox @ref="SfProductName" Placeholder="Enter Product name..." @bind-Value="@ProductName"></SfTextBox>
@*<label style="color: tomato; font-size: 10px">@ErrorMessage</label>*@

<SfButton CssClass="e-info" OnClick="Checkout">Checkout Sample</SfButton>
<label style="color: tomato; font-size: 15px">@ErrorMessage</label>


@code {

  [Parameter] public string Amount { get; set; }
  [Parameter] public string Email { get; set; }

  SfTextBox SfProductName;
  public string ProductName { get; set; }

  private IDisposable apiCallSub;
  public string ErrorMessage = "";
  string sessionId = String.Empty;


  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();
    jsRuntime.InvokeVoidAsync("redirectToCheckout"/*, sessionId*/);

  }


  private void Checkout()
  {
    if (String.IsNullOrEmpty(Email))
    {
      ErrorMessage = "Please insert an Email";
    }
    else if (String.IsNullOrEmpty(Amount))
    {
      ErrorMessage = "Please insert an Amount";
    }
    else if (String.IsNullOrEmpty(ProductName))
    {
      ErrorMessage = "Please insert Product Name";
    }
    else
    {
      _StripeStateService.CheckoutSample(Email, long.Parse(Amount), ProductName);
    }
    //jsRuntime.InvokeVoidAsync("redirectToCheckout"/*, sessionId*/);

  }

  private void Subscribes()
  {
    apiCallSub = _StripeStateService.ApiCallResultObservable.Subscribe(async x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      Console.WriteLine(x.Data);

      sessionId = x.Data;

      switch (x.Operation)
      {

        case "CreateCheckoutSampleSession":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            NavManager.NavigateTo("/CheckoutSampleCancel");
            StateHasChanged();
          }
          else
          {
            NavManager.NavigateTo("/CheckoutSampleSuccess");
            await jsRuntime.InvokeVoidAsync("redirectToCheckout", sessionId);
            //StateHasChanged();
          }

          break;
      }

    });

  }

  public void Dispose()
  {
    apiCallSub.Dispose();
  }
}
