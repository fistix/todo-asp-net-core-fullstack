@inject StripeStateService _StripeStateService
@implements IDisposable

<h3>OffSession Payment Component</h3>


@*<SfButton CssClass="e-info"  @onclick="() => Deduct(Amount)" >Deduct</SfButton>*@
<SfButton CssClass="e-info" @onclick="Deduct">Deduct</SfButton>
<label style="color: tomato; font-size: 15px">@ErrorMessage</label>



@code {
  [Parameter] public string CustomerId { get; set; }
  [Parameter] public string Amount { get; set; }
  //SfNumericTextBox AmountSf;
  //SfTextBox AmountSf;
  //public string Amount { get; set; }



  private IDisposable apiCallSub;
  public string ErrorMessage = "";


  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();
  }

  private async void Deduct()
  {
    if (String.IsNullOrEmpty(CustomerId))
    {
      ErrorMessage = "Please Create/Get any customer before !";
    }
    else if (String.IsNullOrEmpty(Amount))
    {
      ErrorMessage = "Please insert an Amount";
    }
    else
    {
      //Console.WriteLine("Deduct button is clicked",Amount);
      await _StripeStateService.OffSessionPayment(CustomerId, long.Parse(Amount));
    }

  }

  private void Subscribes()
  {
    apiCallSub = _StripeStateService.ApiCallResultObservable.Subscribe(x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
    //Console.WriteLine(x.Data);
    switch (x.Operation)
      {

        case "OffSessionPayment":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
          //IsSucceed = true;
          //IsTaskRunning = false;
          //SpinnerVisiblity = false;

          //ToastObj.Show().GetAwaiter().GetResult();

          StateHasChanged();
          }

          break;
      }

    });

  }

  public void Dispose()
  {
    apiCallSub.Dispose();
  }

}
