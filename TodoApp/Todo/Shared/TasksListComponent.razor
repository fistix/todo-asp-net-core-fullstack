@using System.Net.Http.Headers

@inject HttpClient _http
@inject AuthHandler _auth
@inject TasksService _tasksService
@inject TaskStateService _TaskStateService


@inject ProfileStateService _ProfileStateService
@using Fistix.Training

@using Fistix.Training.Domain.Dtos
@using Fistix.Training.Domain.Commands.Tasks
@implements IDisposable

<h1>Tasks - @Tasks.Count</h1>

<span class="error">@ErrorDetails</span>

@*<thead>
    <tr>
      <td>Title</td>
      <td>Description</td>
      <td>Is Active</td>
    </tr>
  </thead>
  @foreach (var task in Tasks)
  {
    <tbody>
      <tr>
        <td>@task.Title</td>
        <td>@task.Description</td>
        <td>@task.Active</td>
      </tr>
    </tbody>
  }*@


@*<div class="d-flex justify-content-center mt-4">*@
<div class="d-flex justify-content-between mb-2">
  <div class="mr-5">
    <SfButton OnClick="RefreshTasks" Disabled="IsTaskRunning">Refresh</SfButton>
  </div>

  <div>
    <SfButton OnClick="CreateModalOpen" Disabled="IsTaskRunning" CssClass="e-primary">Add New Task</SfButton>
    @*<button type="button" class="btn btn-secondary" @onclick="OpenModal" >Add New Task</button>*@
  </div>
  
  <div>
    <SfButton OnClick="CreateMyTaskModalOpen" Disabled="IsTaskRunning" CssClass="e-secondary">Add My Task</SfButton>
  </div>

  <div>
    <SfButton OnClick="GetMyAllTasks" Disabled="IsTaskRunning" CssClass="e-secondary">Get My Tasks</SfButton>
  </div>
</div>
@if (CreateModalPopup)
{
  <div class="modal" tabindex="-1" role="dialog" style="display: block; background: #00000033;">
    <div class="modal-dialog">
      <div class="modal-content" style="position: absolute; right: -85px; top: 203px;">
        <div class="modal-header">
          <h5 class="modal-title">Add New Task</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CreateModalClose"></button>
        </div>
        <div class="modal-body">
          @*<p>Modal body text goes here.</p>*@

          <label style="color: tomato; font-size: 10px">@ErrorMessage</label>
          <SfTextBox @ref="Title" Placeholder="Enter Title"
                     @bind-Value="@CreateCommand.Title" FloatLabelType='@FloatLabelType.Auto'>
          </SfTextBox>

          <label style="color: tomato; font-size: 10px">@ErrorMessage</label>
          <SfTextBox @ref="Description" Placeholder="Enter Description"
                     @bind-Value="@CreateCommand.Description" FloatLabelType='@FloatLabelType.Auto'>
          </SfTextBox>

          <SfCheckBox Label="Is Active" @bind-Checked="@CreateCommand.Active"></SfCheckBox>

          <div class="d-flex justify-content-center mt-4">
            <div class="mr-5">
              <SfButton CssClass="e-success" Disabled="IsTaskRunning" @onclick="AddNewTask">Create</SfButton>
              @*<button @onclick="AddNewTask">Save</button>*@

              <SfButton CssClass="e-info" OnClick="CreateModalClose">
                Close
              </SfButton>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
}

@if (EditModalPopup)
{
  <div class="modal" tabindex="-1" role="dialog" style="display: block; background: #00000033;">
    <div class="modal-dialog">
      <div class="modal-content" style="position: absolute; right: -85px; top: 203px;">
        <div class="modal-header">
          <h5 class="modal-title">Edit Task</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="EditModalClose"></button>
        </div>
        <div class="modal-body">
          @*<p>Modal body text goes here.</p>*@

          <label style="color: tomato; font-size: 10px">@ErrorMessage</label>
          <SfTextBox @ref="Title" Placeholder="Enter Title"
                     @bind-Value="@UpdateCommand.Title" FloatLabelType='@FloatLabelType.Auto'>
          </SfTextBox>

          <label style="color: tomato; font-size: 10px">@ErrorMessage</label>
          <SfTextBox @ref="Description" Placeholder="Enter Description"
                     @bind-Value="@UpdateCommand.Description" FloatLabelType='@FloatLabelType.Auto'>
          </SfTextBox>

          <SfCheckBox Label="Is Active" @bind-Checked="@UpdateCommand.Active"></SfCheckBox>

          <div class="d-flex justify-content-center mt-4">
            <div class="mr-5">
              <SfButton CssClass="e-success" Disabled="IsTaskRunning" @onclick="UpdateTask">Update</SfButton>
              @*<button @onclick="AddNewTask">Save</button>*@

              <SfButton CssClass="e-info" OnClick="EditModalClose">
                Close
              </SfButton>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
}


@if (AssignUserModal)
{
  <div class="modal" tabindex="-1" role="dialog" style="display: block; background: #00000033;">
    <div class="modal-dialog">
      <div class="modal-content" style="position: absolute; right: -85px; top: 203px;">
        <div class="modal-header">
          <h5 class="modal-title">Assign User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="AssignUserModalClose"></button>
        </div>
        <div class="modal-body">

          <SfDropDownList ValueChanged="StoreUserid" TValue="string" TItem="@ProfileDto" Placeholder="Select User" DataSource="@Profiles">
            <DropDownListFieldSettings Value="ProfileId" Text="FirstName"></DropDownListFieldSettings>
          </SfDropDownList>

          <div class="d-flex justify-content-center mt-4">
            <div class="mr-5">
              <SfButton CssClass="e-success" Disabled="IsTaskRunning" @onclick="AssignUser">Assign</SfButton>
              @*<button @onclick="AddNewTask">Save</button>*@
            </div>

            <div class="mr-5">
              <SfButton CssClass="e-info" OnClick="AssignUserModalClose">
                Close
              </SfButton>
            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
}

@if (CreateMyTaskModalPopup)
{
  <div class="modal" tabindex="-1" role="dialog" style="display: block; background: #00000033;">
    <div class="modal-dialog">
      <div class="modal-content" style="position: absolute; right: -85px; top: 203px;">
        <div class="modal-header">
          <h5 class="modal-title">Add My Task</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CreateMyTaskModalClose"></button>
        </div>
        <div class="modal-body">
          @*<p>Modal body text goes here.</p>*@

          <label style="color: tomato; font-size: 10px">@ErrorMessage</label>
          <SfTextBox @ref="Title" Placeholder="Enter Title"
                     @bind-Value="@CreateMyTaskCommand.Title" FloatLabelType='@FloatLabelType.Auto'>
          </SfTextBox>

          <label style="color: tomato; font-size: 10px">@ErrorMessage</label>
          <SfTextBox @ref="Description" Placeholder="Enter Description"
                     @bind-Value="@CreateMyTaskCommand.Description" FloatLabelType='@FloatLabelType.Auto'>
          </SfTextBox>

          <SfCheckBox Label="Is Active" @bind-Checked="@CreateMyTaskCommand.Active"></SfCheckBox>

          <div class="d-flex justify-content-center mt-4">
            <div class="mr-5">
              <SfButton CssClass="e-success" Disabled="IsTaskRunning" @onclick="AddMyNewTask">Create</SfButton>
              @*<button @onclick="AddNewTask">Save</button>*@

              <SfButton CssClass="e-info" OnClick="CreateMyTaskModalClose">
                Close
              </SfButton>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
}

<SfGrid @ref="Grid" DataSource="@Tasks" AllowPaging="true" AllowSorting="true" AllowFiltering="true">

  <GridPageSettings PageSize="15"></GridPageSettings>

  <GridColumns>
    <GridColumn Field=@nameof(TaskDto.Title) HeaderText="Title" TextAlign="TextAlign.Left" Width="100"></GridColumn>
    <GridColumn Field=@nameof(TaskDto.Description) HeaderText="Description" Width="100"></GridColumn>
    <GridColumn Field=@nameof(TaskDto.Active) HeaderText="Active" TextAlign="TextAlign.Center" Width="70"></GridColumn>
    <GridColumn Field=@nameof(TaskDto.CreatedOn) HeaderText="Created Date" TextAlign="TextAlign.Left" Width="120" Type="ColumnType.Date"></GridColumn>
    <GridColumn Field=@nameof(TaskDto.ModifiedOn) HeaderText="Modified Date" TextAlign="TextAlign.Left" Width="80" Type="ColumnType.Date"></GridColumn>
    <GridColumn Field=@nameof(TaskDto.UserId) HeaderText="Attached User" TextAlign="TextAlign.Left" Width="80"></GridColumn>

    <GridColumn HeaderText="Update" TextAlign="TextAlign.Center" Width="160">
      <Template>
        @{
          var myObj = (context as TaskDto);
          <div>
            @*<SfButton CssClass="e-info">
                <a href="edit/@myObj.TaskId" class="text-white" Match="NavLinkMatch.All">
                  Edit
                </a>
              </SfButton>*@
            <SfButton CssClass="e-info" Disabled="IsTaskRunning" @onclick="() => EditTask(myObj.Id)">
              Edit Modal
            </SfButton>

            <SfButton CssClass="e-info" Disabled="IsTaskRunning" @onclick="() => AssignUserWithTask(myObj.Id)">
              Assign User
            </SfButton>
          </div>
        }
      </Template>
    </GridColumn>

    <GridColumn HeaderText="Delete" TextAlign="TextAlign.Center" Width="40">
      <Template>
        @{
          var obj = (context as TaskDto);

          <SfButton CssClass="e-danger" Disabled="IsTaskRunning" @onclick="() => StoreId(obj.Id)">
            Delete
          </SfButton>
          <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible"
                    CloseOnEscape="true">
            <DialogTemplates>
              <Header> Confirm Delete</Header>
              <Content> Are you sure you want to delete this record? (@idToBeDeleted)</Content>
            </DialogTemplates>
            <DialogButtons>
              <DialogButton Content="OK" IsPrimary="true" @onclick="() => Delete(idToBeDeleted)" />
              <DialogButton Content="Cancel" OnClick="@CloseDialog" />
            </DialogButtons>
          </SfDialog>
        }
      </Template>
    </GridColumn>
  </GridColumns>

  @*<GridEvents TValue="TaskDto" OnActionBegin="ActionBegin"></GridEvents>*@
</SfGrid>

<div>
  <div id="container">
    <SfSpinner @bind-Visible="@SpinnerVisiblity" CssClass="e-spin-overlay"
               Type="@SpinnerType.Bootstrap" Size="100">
    </SfSpinner>
  </div>
</div>

<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {

  private bool CreateMyTaskModalPopup { get; set; } = false;
  CreateMyTaskCommand CreateMyTaskCommand = new CreateMyTaskCommand();

  private void CreateMyTaskModalOpen()
  {
    this.CreateMyTaskModalPopup = true;
  }
  private void CreateMyTaskModalClose()
  {
    this.CreateMyTaskModalPopup = false;
  }

  private void AddMyNewTask()
  {
    if (CreateMyTaskCommand != null)
    {
      if (String.IsNullOrWhiteSpace(CreateMyTaskCommand.Title))
      {
        Title.CssClass = "e-error";
      }
      else if (String.IsNullOrWhiteSpace(CreateMyTaskCommand.Description))
      {
        Description.CssClass = "e-error";
      }
      else
      {
        IsTaskRunning = true;
        SpinnerVisiblity = true;

        _TaskStateService.CreateMyTask(CreateMyTaskCommand);
      }
    }
  }

  //[Parameter]
  //public EventCallback OnRefershTask { get; set; }


  //Create start
  private bool CreateModalPopup { get; set; }
  SfTextBox Title;
  SfTextBox Description;
  CreateTaskCommand CreateCommand = new CreateTaskCommand();

  private void CreateModalOpen()
  {
    this.CreateModalPopup = true;
  }
  private void CreateModalClose()
  {
    this.CreateModalPopup = false;
  }

  private void AddNewTask()
  {
    if (CreateCommand != null)
    {
      if (String.IsNullOrWhiteSpace(CreateCommand.Title))
      {
        Title.CssClass = "e-error";
      }
      else if (String.IsNullOrWhiteSpace(CreateCommand.Description))
      {
        Description.CssClass = "e-error";
      }
      else
      {
        IsTaskRunning = true;
        SpinnerVisiblity = true;
        _TaskStateService.CreateTask(CreateCommand);
      }
    }
  }

  //Edit start
  //public string TaskId { get; set; }
  private bool EditModalPopup { get; set; }
  private TaskDto taskDto = new TaskDto();
  UpdateTaskCommand UpdateCommand = new UpdateTaskCommand();
  private void EditModalOpen()
  {
    this.EditModalPopup = true;
  }
  private void EditModalClose()
  {
    this.EditModalPopup = false;
  }

  private async void EditTask(Guid? TaskId)
  {
    taskDto = await _TaskStateService.GetTaskById(Guid.Parse(TaskId.ToString()));

    UpdateCommand.Title = taskDto.Title;
    UpdateCommand.Description = taskDto.Description;
    UpdateCommand.Active = taskDto.Active;
    UpdateCommand.Id = Guid.Parse(taskDto.Id.ToString());
    EditModalOpen();
  }

  private void UpdateTask()
  {
    if (UpdateCommand != null)
    {
      if (String.IsNullOrWhiteSpace(UpdateCommand.Title))
      {
        Title.CssClass = "e-error";
      }
      else if (String.IsNullOrWhiteSpace(UpdateCommand.Description))
      {
        Description.CssClass = "e-error";
      }
      else
      {
        IsTaskRunning = true;
        SpinnerVisiblity = true;
        _TaskStateService.UpdateTask(UpdateCommand.Id, UpdateCommand);
      }
    }
  }



  //AssignUser start

  //
  //[Parameter]
  //public List<ProfileDto> Profiles { get; set; }
  //private IEnumerable<ProfileDto> Profiless { get; set; }

  //private ProfileDto profileDto = new ProfileDto();
  //private TaskDto taskDto = new TaskDto();

  private Guid TaskId { get; set; }/* = Guid.Empty;*/

  private bool AssignUserModal { get; set; } = false;

  private IDisposable profilesSub;
  private IDisposable profilesApiCallSub;

  public List<ProfileDto> Profiles = new List<ProfileDto>();

  AttachUserWithTaskCommand AttachUserCommand = new AttachUserWithTaskCommand();

  private void AssignUserModalOpen()
  {
    this.AssignUserModal = true;
  }
  private void AssignUserModalClose()
  {
    this.AssignUserModal = false;
  }

  private async void AssignUserWithTask(Guid? taskId)
  {
    TaskId = Guid.Parse(taskId.ToString());

    //taskDto = await _TaskStateService.GetTaskById(TaskId);
    //AttachUserCommand.TaskId = TaskId/*Guid.Parse(taskDto.TaskId.ToString())*/;

    Console.WriteLine($"Id from parameter is: {taskId}");
    Console.WriteLine($"Id from variable is: {TaskId}");

    AssignUserModalOpen();
  }

  private void StoreUserid(string id)
  {
    //UserId = Guid.Parse(id);
    AttachUserCommand.UserId = Guid.Parse(id);
    Console.WriteLine($"Item Select ID: {id}");
  }

  private void AssignUser()
  {
    IsTaskRunning = true;
    SpinnerVisiblity = true;
    Console.WriteLine($"Profile id is: {AttachUserCommand.UserId}");
    Console.WriteLine($"Task id is: {TaskId}");
    _TaskStateService.AssignUserWithTask(TaskId, AttachUserCommand);

  }
  //AssignUser end

  [Parameter]
  public List<TaskDto> Tasks { get; set; }

  private Guid? idToBeDeleted { get; set; }

  //Toast
  SfToast ToastObj;
  private string ToastTitle = string.Empty;

  private bool IsTaskRunning { get; set; } = false;
  private bool SpinnerVisiblity { get; set; } = false;
  private bool IsVisible { get; set; }
  public string ErrorDetails = "";


  SfGrid<TaskDto> Grid;

  private IDisposable apiCallSub;
  private IDisposable taskSub;



  public string ErrorMessage = "";
  public bool IsSucceed { get; set; }


  //public async Task ActionBegin(ActionEventArgs<TaskDto> arg)
  //{
  //  //Handles refresh operation
  //  if (arg.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Refresh))
  //  {

  //    //await OnRefershTask.InvokeAsync();
  //    //await GetAllTasks();
  //  }
  //}

  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();
  }

  private void RefreshTasks()
  {
    this.IsVisible = false;
    IsTaskRunning = true;
    SpinnerVisiblity = true;
    _TaskStateService.GetAllTasks();
  }

  private void GetMyAllTasks()
  {
    this.IsVisible = false;
    IsTaskRunning = true;
    SpinnerVisiblity = true;
    _TaskStateService.GetMyAllTasks();
  }

  private void Subscribes()
  {
    apiCallSub = _TaskStateService.ApiCallResultObservable.Subscribe(x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      switch (x.Operation)
      {
        case "GetAllTasks":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;
            StateHasChanged();
          }

          break;

        case "CreateTask":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;

            CreateCommand.Title = "";
            CreateCommand.Description = "";

            CreateModalClose();


            ToastObj.Content = "Task is Created successfully!";
            ToastObj.Show()/*.GetAwaiter().GetResult()*/;
            StateHasChanged();
          }

          break;

        case "UpdateTask":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;

            EditModalClose();

            ToastObj.Content = "Task is Updated successfully!";
            ToastObj.Show()/*.GetAwaiter().GetResult()*/;
            StateHasChanged();
            //apiCallSub.Dispose();
          }

          break;

        case "DeleteTask":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;
            ToastObj.Content = "Task is Deleted successfully!";
            ToastObj.Show()/*.GetAwaiter().GetResult()*/;

            StateHasChanged();
          }

          break;

        case "AttachUserWithTask":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;

            AssignUserModalClose();

            ToastObj.Content = "Task is assigned to user successfully!";
            ToastObj.Show()/*.GetAwaiter().GetResult()*/;

            StateHasChanged();
          }

          break;

        case "CreateMyTask":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;

            CreateMyTaskCommand.Title = "";
            CreateMyTaskCommand.Description = "";

            CreateMyTaskModalClose();

            ToastObj.Content = "My Task is Created successfully!";
            ToastObj.Show()/*.GetAwaiter().GetResult()*/;
            StateHasChanged();
          }

          break;

        case "GetMyAllTasks":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;
            StateHasChanged();
          }

          break;
      }

    });

    //
    profilesSub = _ProfileStateService.AllProfilesObservable.Subscribe(x =>
    {
      this.Profiles = x;
      //this.Profiless = x;
      StateHasChanged();
    });

    profilesApiCallSub = _ProfileStateService.ApiCallResultObservable.Subscribe(x =>
    {
      switch (x.Operation)
      {
        case "GetAllProfiles":
          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;
            StateHasChanged();
          }

          break;
      }

    });

  }

  //Delete start
  private /*async Task*/void Delete(Guid? val)
  {

    this.IsVisible = false;
    IsTaskRunning = true;
    SpinnerVisiblity = true;
    _TaskStateService.DeleteTask(val.Value);
    CloseDialog();
  }

  private void StoreId(Guid? id)
  {
    idToBeDeleted = id;
    OpenDialog()/*.GetAwaiter().GetResult()*/;
  }

  private /*async Task*/void OpenDialog()
  {
    this.IsVisible = true;
  }

  private void CloseDialog()
  {
    this.IsVisible = false;
  }

  //Delete end

  public void Dispose()
  {
    taskSub.Dispose();
    apiCallSub.Dispose();
    //
    profilesSub.Dispose();
    profilesApiCallSub.Dispose();
  }

}