@inject StripeStateService _StripeStateService
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime


<h3>Sample Checkout Component</h3>


<SfTextBox @ref="SfProductName" @bind-Value="@checkoutCommand.ProductName" 
           Placeholder="Enter Product name..." FloatLabelType='@FloatLabelType.Auto'
           Readonly="ButtonDisable">
</SfTextBox>


<SfNumericTextBox TValue="int" @bind-Value="@checkoutCommand.Amount" 
                  
                  Placeholder="Enter Amount in cents..." FloatLabelType='@FloatLabelType.Auto'
                  Readonly="ButtonDisable">
</SfNumericTextBox>


<SfTextBox @ref="SfEmail" @bind-Value="@checkoutCommand.Email" 
           Placeholder="Enter Email..." FloatLabelType='@FloatLabelType.Auto'
           Readonly="ButtonDisable">
</SfTextBox>


<div>
  <label style="color: tomato; font-size: 15px">@ErrorMessage</label>
</div>

<SfButton CssClass="e-info" OnClick="Checkout" Disabled="ButtonDisable">Sample Checkout</SfButton>


<div>
  <div id="loader">
    <SfSpinner @bind-Visible="@LoaderVisiblity" CssClass="e-spin-overlay"
               Type="@SpinnerType.Bootstrap" Size="100">
    </SfSpinner>
  </div>
</div>

<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

<style>
  #loader {
    position: relative;
  }
</style>

@code {

  #region Loader-Toaster
  SfToast ToastObj;
  private string ToastTitle = string.Empty;

  private bool ButtonDisable { get; set; } = false;
  private bool LoaderVisiblity { get; set; } = false;
  #endregion


  SfTextBox SfProductName;
  SfTextBox SfEmail;
  //public string ProductName { get; set; }
  //public string Amount { get; set; }

  private IDisposable apiCallSub;
  public string ErrorMessage = "";
  string sessionId = String.Empty;

  SampleCheckoutCommand checkoutCommand = new SampleCheckoutCommand();


  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();
    //jsRuntime.InvokeVoidAsync("redirectToCheckout"/*, sessionId*/);

  }


  private async void Checkout()
  {
    if (checkoutCommand != null)
    {
      if (String.IsNullOrEmpty(checkoutCommand.Email))
      {
        SfEmail.CssClass = "e-error";
        ErrorMessage = "Please insert an Email";
      }

      else if (checkoutCommand.Amount <= 0)
      {
        ErrorMessage = "Please insert an Amount";
      }

      else if (String.IsNullOrEmpty(checkoutCommand.ProductName))
      {
        SfProductName.CssClass = "e-error";
        ErrorMessage = "Please insert Product Name";
      }

      else
      {
        ButtonDisable = true;
        LoaderVisiblity = true;
        await _StripeStateService.CheckoutSample(checkoutCommand);
      }
      //jsRuntime.InvokeVoidAsync("redirectToCheckout"/*, sessionId*/);
    }

    //Also works validation without this else
    else
    {
      ErrorMessage = "Please fill the fields!";
    }
  }

  private void Subscribes()
  {
    apiCallSub = _StripeStateService.ApiCallResultObservable.Subscribe(async x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      Console.WriteLine(x.Data);

      switch (x.Operation)
      {

        case "CreateSampleCheckoutSession":

          if (x.IsSucceed == false)
          {
            ButtonDisable = false;
            LoaderVisiblity = false;
            ErrorMessage = x.ErrorMessage;
            NavManager.NavigateTo("/CheckoutSampleCancel");
          }

          else
          {
            //NavManager.NavigateTo("/CheckoutSampleSuccess");
            sessionId = x.Data;
            ButtonDisable = false;
            LoaderVisiblity = false;
            ErrorMessage = String.Empty;
            SfEmail.CssClass = "";
            SfProductName.CssClass = "";

            await jsRuntime.InvokeVoidAsync("redirectToCheckout", sessionId);
            //StateHasChanged();
          }

          break;
      }

    });

  }

  public void Dispose()
  {
    apiCallSub.Dispose();
  }
}
