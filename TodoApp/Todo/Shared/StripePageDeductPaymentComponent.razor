@inject StripeStateService _StripeStateService
@implements IDisposable

<h3>Deduct Payment Component</h3>


<SfNumericTextBox TValue="int" @bind-Value="@paymentDeductCommand.Amount"
                  Placeholder="Enter Amount in cents..." FloatLabelType='@FloatLabelType.Auto'
                  Readonly="ButtonDisable">
</SfNumericTextBox>


<div>
  <label style="color: tomato; font-size: 15px">@ErrorMessage</label>
</div>

<SfButton CssClass="e-info" @onclick="Deduct" Disabled="ButtonDisable">Deduct</SfButton>


  <div id="loader">
    <SfSpinner @bind-Visible="@LoaderVisiblity" CssClass="e-spin-overlay"
               Type="@SpinnerType.Bootstrap" Size="100">
    </SfSpinner>
  </div>

<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

<style>
  #loader {
    position: relative;
  }
</style>

@code {

  #region Loader-Toaster
  SfToast ToastObj;
  private string ToastTitle = string.Empty;

  private bool ButtonDisable { get; set; } = false;
  private bool LoaderVisiblity { get; set; } = false;
  #endregion


  [Parameter] public string StripeCustomerId { get; set; }
  [Parameter] public string CustomerId { get; set; }



  PaymentDeductCommand paymentDeductCommand = new PaymentDeductCommand();

  private IDisposable apiCallSub;
  public string ErrorMessage = "";


  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();
  }

  private async void Deduct()
  {
    if (String.IsNullOrEmpty(StripeCustomerId))
    {
      ErrorMessage = "Please Create/Get any customer before !";
    }

    else if (String.IsNullOrEmpty(CustomerId))
    {
      ErrorMessage = "Please Create/Get any customer before !";
    }

    else if (paymentDeductCommand.Amount <= 0)
    {
      ErrorMessage = "Please insert an Amount";
    }

    else
    {
      paymentDeductCommand.StripeCustomerId = StripeCustomerId;
      paymentDeductCommand.CustomerId = CustomerId;

      ButtonDisable = true;
      LoaderVisiblity = true;
      await _StripeStateService.PaymentDeduct(paymentDeductCommand);
    }

  }

  private void Subscribes()
  {
    apiCallSub = _StripeStateService.ApiCallResultObservable.Subscribe(x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      //Console.WriteLine(x.Data);
      switch (x.Operation)
      {

        case "PaymentDeduct":

          if (x.IsSucceed == false)
          {
            ButtonDisable = false;
            LoaderVisiblity = false;
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }

          else
          {
            //IsSucceed = true;

            ButtonDisable = false;
            LoaderVisiblity = false;
            ErrorMessage = String.Empty;
            paymentDeductCommand.Amount = 0;

            ToastObj.Content = "Payment deducted successfully!";
            ToastObj.Show();
            StateHasChanged();
          }

          break;
      }

    });

  }

  public void Dispose()
  {
    apiCallSub.Dispose();
  }

}
