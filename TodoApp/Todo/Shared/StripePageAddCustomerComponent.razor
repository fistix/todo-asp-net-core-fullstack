@inject StripeStateService _StripeStateService
@implements IDisposable

<h3>Add Customer Component</h3>

<SfTextBox @ref="SfFirstName" Placeholder="Enter First Name..." @bind-Value="createCustomerCommand.FirstName"></SfTextBox>

<SfTextBox @ref="SfLastName" Placeholder="Enter Last Name..." @bind-Value="createCustomerCommand.LastName"></SfTextBox>

<SfTextBox @ref="SfEmail" Placeholder="Enter Email..." @bind-Value="createCustomerCommand.Email"></SfTextBox>

<div>
  <label style="color: tomato; font-size: 15px">@ErrorMessage</label>
</div>

<SfButton CssClass="e-info" @onclick="GetCustomer" >Create Or Get Customer</SfButton>


<div>
  <div id="container">
    <SfSpinner @bind-Visible="@LoaderVisiblity" CssClass="e-spin-overlay"
               Type="@SpinnerType.Bootstrap" Size="100">
    </SfSpinner>
  </div>
</div>

<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {

  //[Parameter]
  //public string Email { get; set; }

  [Parameter]
  public EventCallback<CustomerDto> OnSendStripeCustomerIdToParent { get; set; }

  //[Parameter]
  //public EventCallback<string> OnSendCustomerIdToParent { get; set; }


  SfTextBox SfFirstName;
  SfTextBox SfLastName;
  SfTextBox SfEmail;

  public string ErrorMessage = "";
  CustomerDto CustomerDto = new CustomerDto();
  CreateCustomerCommand createCustomerCommand = new CreateCustomerCommand();
  GetCustomerDetailByEmailQuery getCustomerByEmail = new GetCustomerDetailByEmailQuery();
  private IDisposable apiCallSub;

  #region UI
  SfToast ToastObj;
  private string ToastTitle = string.Empty;


  private bool ButtonDisable { get; set; } = false;
  private bool LoaderVisiblity { get; set; } = false;
  #endregion


  private async void GetCustomer()
  {
    if (createCustomerCommand != null)
    {
      //CreateCustomerCommand.Email = Email;
      if (String.IsNullOrEmpty(createCustomerCommand.Email))
      {
        SfEmail.CssClass = "e-error";
        ErrorMessage = "Please insert an Email";
      }

      else if (String.IsNullOrEmpty(createCustomerCommand.FirstName))
      {
        SfFirstName.CssClass = "e-error";
        ErrorMessage = "Please insert First name";
      }

      else if (String.IsNullOrEmpty(createCustomerCommand.LastName))
      {
        SfLastName.CssClass = "e-error";
        ErrorMessage = "Please insert Last name";
      }

      else
      {
        //ButtonDisable = true;
        //LoaderVisiblity = true;
        getCustomerByEmail.Email = createCustomerCommand.Email;
        await _StripeStateService.GetCustomer(getCustomerByEmail);
      }
    }

    //if (createCustomerCommand.Email == null)
    //{
    //  SfEmail.CssClass = "e-error";
    //  ErrorMessage = "Please insert an Email";

    //}



  }


  private async void CreateCustomer()
  {
    //if (createCustomerCommand != null)
    //{
    //  //CreateCustomerCommand.Email = Email;
    //  if (String.IsNullOrEmpty(createCustomerCommand.Email))
    //  {
    //    SfEmail.CssClass = "e-error";
    //    //ErrorMessage = "Please insert an Email";
    //  }

    //  else if (String.IsNullOrEmpty(createCustomerCommand.FirstName))
    //  {
    //    SfFirstName.CssClass = "e-error";
    //    //ErrorMessage = "Please insert First name";
    //  }

    //  else if (String.IsNullOrEmpty(createCustomerCommand.LastName))
    //  {
    //    SfLastName.CssClass = "e-error";
    //    //ErrorMessage = "Please insert Last name";
    //  }

    //  else
    //  {
    await _StripeStateService.CreateCustomer(createCustomerCommand);
    //}
    //}

  }

  protected override void OnInitialized()
  {
    Subscribes();
  }

  private void Subscribes()
  {
    apiCallSub = _StripeStateService.ApiCallResultObservable.Subscribe(async x =>
    {

      Console.WriteLine(x.Payload);

      switch (x.Operation)
      {
        case "GetStripeCustomerByEmail":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            CreateCustomer();
          }

          else
          {
            await OnSendStripeCustomerIdToParent.InvokeAsync(x.Payload);

            //IsSucceed = true;

            //ButtonDisable = false;
            //LoaderVisiblity = false;
            //ToastObj.Content = "Customer fetched successfully!";
            //ToastObj.Show()/*.GetAwaiter().GetResult()*/;
            //StateHasChanged();
          }

          break;

        case "CreateStripeCustomer":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
          }

          else
          {
            await OnSendStripeCustomerIdToParent.InvokeAsync(x.Payload);

            //IsSucceed = true;

            //ButtonDisable = false;
            //LoaderVisiblity = false;
            //ToastObj.Content = "Customer is Created successfully!";
            //ToastObj.Show()/*.GetAwaiter().GetResult()*/;
            //StateHasChanged();

          }

          break;
      }

    });
  }

  public void Dispose()
  {
    apiCallSub.Dispose();
  }
}
