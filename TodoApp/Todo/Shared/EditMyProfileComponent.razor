@inject ProfileStateService _ProfileStateService
@using Microsoft.AspNetCore.Http
@using System.IO


@using Fistix.Training.Domain.Dtos


<div class="justify-content-center mt-4">
  <div class="mt-4">
    <label>Email</label>
    <SfTextBox Readonly="true" @bind-Value="Profile.Email"></SfTextBox>
  </div>

  <div class="mt-4">
    <label>FirstName</label>
    <SfTextBox @ref="FirstName" @bind-Value="Profile.FirstName"></SfTextBox>
  </div>

  <div class="mt-4">
    @*<label style="color: tomato; font-size: 10px">@ErrorDetails>LastName</label>*@
    <label>LastName</label>
    <SfTextBox @ref="LastName" @bind-Value="Profile.LastName"></SfTextBox>
  </div>

  <div class="mt-4">
    <label class="font-weight-bold">Profile Picture</label>
    <img Readonly="true" src="@Profile.ProfilePictureUrl" width="100" height="100" />
  </div>

  <div>
    <label class="font-weight-bold">Upload Profile Picture</label>
  </div>
  <InputFile OnChange="HandleInputFileOnChange"/>
</div>

<div>
  <SfUploader AutoUpload="false"
              AllowedExtensions=".jpg, .png"
              MinFileSize=10000 MaxFileSize=1000000>
    <UploaderEvents ValueChange="HandleSfFileOnChange"></UploaderEvents>

  </SfUploader>
</div>


<div class="mt-4">
  <SfButton CssClass="e-success" Disabled="IsTaskRunning" OnClick="UpdateProfile">
    Update
  </SfButton>
</div>

@if (SpinnerVisiblity)
{
<SfSpinner @bind-Visible="@SpinnerVisiblity" CssClass="e-spin-overlay"
           Type="@SpinnerType.Bootstrap" Size="100">
</SfSpinner>
}
<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {

  [Parameter]
  public ProfileDto Profile { get; set; }

  private IDisposable profileSub;
  private IDisposable apiCallSub;
  private string ErrorMessage = string.Empty;

  UpdateMyProfileCommand updateCommand = new UpdateMyProfileCommand();

  //UpdateMyProfilePictureCommand updateProfilePicture= new UpdateMyProfilePictureCommand();

  public IFormFile ProfilePicture { get; set; }

  System.IO.Stream File = null;
  string FileName = null;




  SfTextBox FirstName { get; set; }
  SfTextBox LastName { get; set; }
  private string ErrorDetails = "";

  //Toast
  SfToast ToastObj;
  private string ToastTitle = string.Empty;

  private bool IsTaskRunning { get; set; } = false;
  private bool SpinnerVisiblity { get; set; } = false;


  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();
  }

  void HandleInputFileOnChange(InputFileChangeEventArgs args)
  {
    File = args.File.OpenReadStream();
    FileName = args.File.Name;
  }

  void HandleSfFileOnChange(UploadChangeEventArgs args)
  {
    foreach (var file in args.Files)
    {

      FileName = file.FileInfo.Name;


      var path = file.FileInfo.Name;
      FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
      file.Stream.WriteTo(filestream);
      filestream.Close();
      file.Stream.Close();

      File = filestream;
    }
    //File = args.File.OpenReadStream();
    //FileName = args.File.Name;

  }

  private void UpdateProfile()
  {
    //updateCommand.Email= Profile.Email;
    updateCommand.FirstName = Profile.FirstName;
    updateCommand.LastName = Profile.LastName;
    _ProfileStateService.UpdateMyProfile(updateCommand, File, FileName);
    return;
    //updateProfilePicture.ProfilePicture = ProfilePicture;

    if (updateCommand != null)
    {
      if (String.IsNullOrWhiteSpace(updateCommand.FirstName))
      {
        FirstName.CssClass = "e-error";
      }
      else if (String.IsNullOrWhiteSpace(updateCommand.LastName))
      {
        LastName.CssClass = "e-error";
      }
      else
      {
        IsTaskRunning = true;
        SpinnerVisiblity = true;
        //_ProfileStateService.UpdateMyProfile(updateCommand);
        _ProfileStateService.UpdateMyProfile(updateCommand, File, FileName);
        //_ProfileStateService.UpdateMyProfilePicture(File, FileName);// updateProfilePicture);
      }
    }
  }

  private void Subscribes()
  {
    profileSub = _ProfileStateService.MyProfileObservable.Subscribe(x =>
    {
      this.Profile = x;
      StateHasChanged();
    });

    apiCallSub = _ProfileStateService.ApiCallResultObservable.Subscribe(x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      Console.WriteLine(x.ErrorMessage);

      switch (x.Operation)
      {

        case "UpdateMyProfile":

          if (x.IsSucceed == false)
          {
            SpinnerVisiblity = false;
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            //IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;

            ToastObj.Content = "Profile is Updated successfully!";
            ToastObj.Show()/*.GetAwaiter().GetResult()*/;
            ToastObj.Dispose();

            StateHasChanged();
          }

          break;

        case "UpdateMyProfilePicture":

          if (x.IsSucceed == false)
          {
            SpinnerVisiblity = false;
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            //IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;

            //ToastObj.Show().GetAwaiter().GetResult();

            StateHasChanged();
          }

          break;
      }

    });

  }

}
