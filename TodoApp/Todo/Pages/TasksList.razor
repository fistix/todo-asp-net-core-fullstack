@page "/tasksList"
@attribute [Authorize]
@*@inject TasksService _tasksService*@
@inject TaskStateService _TaskStateService
@inject ProfileStateService _ProfileStateService 

@using Fistix.Training.Domain.Dtos

@implements IDisposable

<div>@Tasks.Count</div>
<div>@ErrorMessage</div>
@*<button @onclick="RefreshTasks">Refresh</button>*@

<TasksListComponent Tasks="@Tasks" />
@*<TasksListComponent Tasks="@Tasks" Profiles="@Profiles" />*@



@*<TasksListComponent Tasks="@Tasks" OnRefershTask="RefreshTasks" />*@



@code {

  public List<TaskDto> Tasks = new List<TaskDto>();
  private string ErrorMessage = string.Empty;
  private IDisposable taskSub;
  private IDisposable apiCallSub;
  //private IDisposable profilesSub;

  public List<ProfileDto> Profiles = new List<ProfileDto>();

  protected override void OnInitialized()
  {
    Subscribes();
  }

  //private void RefreshTasks()
  //{
  //  _TaskStateService.GetAllTasks();
  //}

  private void Subscribes()
  {
    taskSub = _TaskStateService.TaskObservable.Subscribe(x =>
    {
      this.Tasks = x;
      StateHasChanged();
    });


    apiCallSub = _TaskStateService.ApiCallResultObservable.Subscribe(x =>
    {
      if (x.IsSucceed == false && x.Operation == "GetAllTasks")
      {
        ErrorMessage = x.ErrorMessage;
        StateHasChanged();
      }
    });

    //profilesSub = _ProfileStateService.AllProfilesObservable.Subscribe(x =>
    //{
    //  this.Profiles = x;
    //  StateHasChanged();
    //});

  }

  public void Dispose()
  {
    taskSub.Dispose();
    apiCallSub.Dispose();
    //profilesSub.Dispose();
  }

}
