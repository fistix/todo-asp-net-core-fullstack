@page "/MyProfile"
@attribute [Authorize]
@inject ProfileStateService _ProfileStateService
@implements IDisposable
@using Fistix.Training.Domain.Dtos


<EditMyProfileComponent Profile="@Profile"/>


<div>
  <div id="container">
    <SfSpinner @bind-Visible="@SpinnerVisiblity" CssClass="e-spin-overlay"
               Type="@SpinnerType.Bootstrap" Size="100">
    </SfSpinner>
  </div>
</div>

@code {
  private IDisposable profileSub;
  private IDisposable apiCallSub;
  public ProfileDto Profile = new ProfileDto();
  private string ErrorMessage = string.Empty;

  protected override void OnInitialized()
  {
    SpinnerVisiblity = true;
    Subscribes();
  }

  public void Dispose()
  {
    apiCallSub.Dispose();
    profileSub.Dispose();
  }


  private bool SpinnerVisiblity { get; set; } = false;

  //private void GetProfile()
  //{
  //  ShowProfileDetail = true;
  //  IsTaskRunning = true;
  //  SpinnerVisiblity = true;
  //  _ProfileStateService.GetMyProfileDetail();
  //}

  private void Subscribes()
  {
    profileSub = _ProfileStateService.MyProfileObservable.Subscribe(x =>
    {
      this.Profile = x;
      StateHasChanged();
    });

    apiCallSub = _ProfileStateService.ApiCallResultObservable.Subscribe(x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      Console.WriteLine(x.ErrorMessage);
      switch (x.Operation)
      {

        case "GetMyProfileDetail":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            SpinnerVisiblity = false;
            StateHasChanged();
          }

          else
          {
            SpinnerVisiblity = false;
            StateHasChanged();
          }

          break;
          //case "UpdateMyProfile":

          //  if (x.IsSucceed == false)
          //  {
          //    SpinnerVisiblity = false;
          //    ErrorMessage = x.ErrorMessage;
          //    StateHasChanged();
          //  }
          //  else
          //  {
          //    //IsSucceed = true;
          //    IsTaskRunning = false;
          //    SpinnerVisiblity = false;

          //    //ToastObj.Show().GetAwaiter().GetResult();

          //    StateHasChanged();
          //  }

          //  break;
      }

    });

  }

}
