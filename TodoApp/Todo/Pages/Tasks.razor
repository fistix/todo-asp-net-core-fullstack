@using System.Net.Http.Headers

@inject HttpClient _http
@inject AuthHandler _auth
@inject TasksService _tasksService
  <h1>Tasks - @TaskDetails.Count</h1>


<span class="error">@ErrorDetails</span>
<SfGrid @ref="Grid" DataSource="@TaskDetails" AllowPaging="true" AllowSorting="true" AllowFiltering="true">

  <GridPageSettings PageSize="15">

  </GridPageSettings>
  <GridEditSettings AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal">

  </GridEditSettings>
  <GridColumns>
    <GridColumn Field=@nameof(TaskDetail.Title) HeaderText="Title" Type="ColumnType.Date" TextAlign="TextAlign.Left" Width="120"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.Description) HeaderText="Description" Width="150"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.Active) HeaderText="Is Active" TextAlign="TextAlign.Left" Width="100"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.CreatedOn) HeaderText="Created Date" TextAlign="TextAlign.Left" Width="120"></GridColumn>
    <GridColumn Field=@nameof(TaskDetail.ModifiedOn) HeaderText="Modified Date" TextAlign="TextAlign.Left" Width="120"></GridColumn>

    <GridColumn HeaderText="Update" TextAlign="TextAlign.Center" Width="120">
      <Template>
        @{
          var myObj = (context as TaskDetail);
          <div>
            <SfButton CssClass="e-info">
              <a class="nav-link" href="editTask/@myObj.TaskId" Match="NavLinkMatch.All">
                Edit
              </a>
            </SfButton>
          </div>
        }
      </Template>
    </GridColumn>

    <GridColumn HeaderText="Delete" TextAlign="TextAlign.Center" Width="120">
      <Template>
        @{
          var obj = (context as TaskDetail);

          <SfButton CssClass="e-danger" Disabled="IsTaskRunning" @onclick="() => StoreId(obj.TaskId)">
            Delete
            <div>
              <div id="container">
                <SfSpinner @bind-Visible="@SpinnerVisiblity" CssClass="e-spin-overlay"
                           Type="@SpinnerType.Bootstrap" Size="100">
                </SfSpinner>
              </div>
            </div>


            <SfDialog Width="250px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisible">
              <DialogTemplates>
                <Header> Confirm Delete</Header>
                <Content> Are you sure you want to delete this record? (@idToBeDeleted)</Content>
              </DialogTemplates>
              <DialogButtons>
                <DialogButton Content="OK" IsPrimary="true" @onclick="() => Delete(idToBeDeleted)" />
                <DialogButton Content="Cancel" OnClick="@CloseDialog" />
              </DialogButtons>
            </SfDialog>
          </SfButton>
        }
      </Template>
    </GridColumn>

  </GridColumns>
</SfGrid>

<div>
  <div id="container">
    <SfSpinner @bind-Visible="@SpinnerVisiblity" CssClass="e-spin-overlay"
               Type="@SpinnerType.Bootstrap" Size="100">
    </SfSpinner>
  </div>
</div>

<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {

  [Parameter]
  public List<TaskDetail> TaskDetails { get; set; }


  Guid? idToBeDeleted = null;
  //Toast
  SfToast ToastObj;
  private string ToastTitle = "Record deleted successfully!";
  private string ToastCssClass = "";

  bool IsTaskRunning = false;
  private bool SpinnerVisiblity { get; set; } = false;


  private bool IsVisible { get; set; }

  SfGrid<TaskDetail> Grid;
  SearchTodoComponent searchTodoComponent;

  public string ErrorDetails = "";

  //public ResponseModel responseModel = null;




  private async Task Delete(Guid? val)
  {
    this.IsVisible = false;
    IsTaskRunning = true;
    SpinnerVisiblity = true;
    var response = await _tasksService.Delete(val);
    CloseDialog();
    if (response.IsSuccessStatusCode)
    {
      IsTaskRunning = false;
      SpinnerVisiblity = false;
      await ToastObj.Show();
      //Refresh
      await GetAllTasks();
    }
  }
  //Refresh
  private async Task GetAllTasks()
  {
    var responseModel = await _tasksService.GetTasks();
    TaskDetails = responseModel.Payload;

    //Console.WriteLine(responseModel.Payload.Count());
  }

  private void StoreId(Guid? id)
  {
    idToBeDeleted = id;
    OpenDialog().GetAwaiter().GetResult();
  }

  private async Task OpenDialog()
  {
    this.IsVisible = true;
  }

  private void CloseDialog()
  {
    this.IsVisible = false;
  }


}