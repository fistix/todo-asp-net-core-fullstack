@page "/newtask"
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Fistix.Training.Domain.Commands.Tasks
@inject HttpClient _http
@inject AuthHandler _auth
@inject TasksService _tasksService
@inject TaskStateService _TaskStateService
@using System.Net.Http.Headers
@attribute [Authorize]

@implements IDisposable

<label style="color: tomato; font-size: 10px">@ErrorMessage</label>
<SfTextBox @ref="Title" Placeholder="Enter Title"
           @bind-Value="@command.Title" FloatLabelType='@FloatLabelType.Auto'>
</SfTextBox>

<label style="color: tomato; font-size: 10px">@ErrorMessage</label>
<SfTextBox @ref="Description" Placeholder="Enter Description"
           @bind-Value="@command.Description" FloatLabelType='@FloatLabelType.Auto'>
</SfTextBox>

<SfCheckBox Label="Is Active" @bind-Checked="@command.Active"></SfCheckBox>

<div class="d-flex justify-content-center mt-4">
  <div class="mr-5">
    <SfButton CssClass="e-success" Disabled="IsTaskRunning" @onclick="AddTaskRequest">Create</SfButton>
    <button @onclick="AddNewTask">Save</button>
    <div id="container">
      <SfSpinner @bind-Visible="@SpinnerVisiblity" CssClass="e-spin-overlay"
                 Type="@SpinnerType.Bootstrap" Size="100">
      </SfSpinner>
    </div>
  </div>
  <div>
    <SfButton CssClass="e-info">
      <div>
        <a href="/tasks" class="text-white" Match="NavLinkMatch.All">
          Go back
        </a>
      </div>
    </SfButton>
  </div>
</div>

<SfToast @ref="ToastObj" Title="@ToastTitle" CssClass="e-toast-success">
  <ToastPosition X="Right" Y="Bottom"></ToastPosition>
</SfToast>

@code {

  //Toast
  SfToast ToastObj;
  private string ToastTitle = "Record created successfully!";
  private string ToastCssClass = "";

  bool IsTaskRunning = false;
  private bool SpinnerVisiblity { get; set; } = false;

  private IDisposable apiCallSub;

  SfTextBox Title;
  SfTextBox Description;
  public string ErrorMessage = "";
  public bool IsSucceed { get; set; }
  CreateTaskCommand command = new CreateTaskCommand();



  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();
  }

  private void Subscribes()
  {
    apiCallSub = _TaskStateService.ApiCallResultObservable.Subscribe(x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      switch (x.Operation)
      {

        case "CreateTask":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            IsSucceed = true;
            IsTaskRunning = false;
            SpinnerVisiblity = false;

            ToastObj.Show().GetAwaiter().GetResult();

            command.Title = "";
            command.Description = "";

            StateHasChanged();
          }

          break;
      }

    });

  }

  private void AddNewTask()
  {
    IsTaskRunning = true;
    SpinnerVisiblity = true;
    _TaskStateService.CreateTask(command);
  }


  public void Dispose()
  {
    apiCallSub.Dispose();
  }

  private async Task AddTaskRequest(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
  {
    if (command != null)
    {
      if (String.IsNullOrWhiteSpace(command.Title))
      {
        Title.CssClass = "e-error";
      }
      else if (String.IsNullOrWhiteSpace(command.Description))
      {
        Description.CssClass = "e-error";
      }
      else
      {
        IsTaskRunning = true;
        SpinnerVisiblity = true;

        var response = await _tasksService.Create(command);

        if (response.IsSuccessStatusCode)
        {
          IsSucceed = true;
          IsTaskRunning = false;
          SpinnerVisiblity = false;
          await ToastObj.Show();
          command.Title = "";
          command.Description = "";
          StateHasChanged();
        }
      }
    }
  }



}
