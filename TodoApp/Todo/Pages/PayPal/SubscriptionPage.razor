@page "/subscriptionPage"
@inject PayPalStateService _PayPalStateService
@implements IDisposable
@inject IJSRuntime jsRuntime


<script suppress-error="BL9992" src="https://www.paypal.com/sdk/js?client-id=AQm921FElnvm67C0zEH33eRkI7H2i1XM5r7MEyp49Gz_vuXT0D-aFbML5jTj2mKKbtOCKB7uyIagKwG4&vault=true&intent=subscription" data-sdk-integration-source="button-factory"></script>


<h3>Subscription Page</h3>


<SfDropDownList ValueChanged="StorePlanId" TValue="string" TItem="@Plan" Placeholder="Select a Plan" DataSource="@plans">
  <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
</SfDropDownList>

<SfButton CssClass="e-info" OnClick="Checkout">Checkout</SfButton>

<div id="paypal-button-container"></div>

@code {
  public string PlanId = "";
  public string ErrorMessage = "";

  List<Plan> plans = new List<Plan>();

  private IDisposable planSub;
  private IDisposable apiCallSub;


  protected override void OnInitialized()
  {
    Subscribes();
    base.OnInitialized();

  }

  private void StorePlanId(string id)
  {
    //Console.WriteLine($"user id is: {id}");
    PlanId = id;
    //Console.WriteLine($"Item Select ID: {id}");
    Console.WriteLine($"Selected Plan Id is: {PlanId}");
  }

  private void Checkout()
  {
    jsRuntime.InvokeVoidAsync("Subscription", PlanId);
  }

  private void Subscribes()
  {
    planSub = _PayPalStateService.PlansObservable.Subscribe(x =>
    {
      this.plans = x;
      StateHasChanged();
    });

    apiCallSub = _PayPalStateService.ApiCallResultObservable.Subscribe(x =>
    {
      Console.WriteLine(x.Operation);
      Console.WriteLine(x.IsSucceed);
      switch (x.Operation)
      {
        case "GetAllPlans":

          if (x.IsSucceed == false)
          {
            ErrorMessage = x.ErrorMessage;
            StateHasChanged();
          }
          else
          {
            //IsSucceed = true;
            //IsTaskRunning = false;
            //SpinnerVisiblity = false;
            //plans = x.Plans;
            StateHasChanged();
          }

          break;
      }

    });
  }

  public void Dispose()
  {
    planSub.Dispose();
    apiCallSub.Dispose();
  }

}